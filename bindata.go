// Code generated by go-bindata.
// sources:
// data/aws-simple/build/build-php.sh.tpl
// data/aws-simple/build/template.json.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// data/common/dev/layer-base/Vagrantfile.tpl
// data/common/dev/php_version.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleBuildBuildPhpShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x55\x6d\x6f\x22\x37\x10\xfe\xbe\xbf\x62\x6e\x2f\x6a\xda\xea\x8c\xb9\x48\x91\x2a\xf2\xa2\x72\x84\x6b\x22\x9d\x20\x82\xf6\xfa\x21\x8d\x22\xb3\x3b\xbb\xf8\xb2\x6b\xfb\x6c\x2f\x84\x70\xfc\xf7\x8e\xbd\x84\x84\x54\xcd\x27\xbc\xf6\xbc\x3c\xf3\xcc\x33\xc3\xfb\x77\x7c\x26\x15\x9f\x09\x37\x4f\x12\x87\x1e\x98\x06\xa5\x1b\xb5\x3d\xa2\xb5\xf8\x20\xe3\xd1\x48\x83\x85\x90\xd5\xf6\xda\x5b\x91\x61\x92\xd0\x49\xdb\x9f\x7f\x81\x75\x02\x00\x95\xce\x44\x05\x4e\x37\x36\xc3\x42\x56\x78\x76\xf0\xf1\xf9\xba\x92\x0a\x95\x3e\x3b\x38\x0a\x57\x98\xcd\x35\xa4\xc3\xc9\x64\x3c\x01\xe1\xe1\x60\xfd\xec\xb4\xe9\x1d\xac\x5b\xdb\xcd\x09\x7c\x11\xce\x93\x7f\xe9\x7a\x69\x70\x2b\x2d\x1a\xd0\xde\x6b\xe0\x0b\x61\x39\x3d\x70\xb7\x72\xf4\x03\x3f\xc0\x47\x6c\x0a\x8e\xba\xc9\x26\x21\x74\x06\x0e\x23\x38\x48\x0f\xd6\x9f\xfa\xd3\xcb\xbb\xe9\xf8\xaf\xc9\x60\xb8\x49\xc3\xc5\x97\xab\xd1\x70\x34\xde\xa4\x87\x40\x18\x92\x44\x63\x28\x81\x1e\x7e\x4f\xe1\xe8\xfc\xa7\x8f\x14\x8e\x82\x96\x68\x81\xf9\x36\xdf\x39\xf0\x1c\x17\x5c\x35\x55\x75\x02\x9b\x44\x57\xd1\xa1\x2d\xe3\x26\x58\xdc\x02\x39\x87\xa7\xe4\x3d\x64\x95\x6e\x72\x96\x69\x55\xc8\x12\x32\xa1\x40\x2a\x8f\xb6\x40\x8b\xb0\x94\x7e\x0e\xc2\x78\xc8\x74\x5d\x0b\x95\x3b\x90\x05\x48\x7f\xe8\xc0\x79\x59\x55\x64\x09\xc6\x6a\xaa\xd3\x39\x4a\x02\xe9\xdf\x42\x7a\xa9\x4a\x28\xa8\x90\xbd\xb0\x84\x89\x42\x98\x0a\x3d\x76\x3a\x9d\x34\x69\x14\xf9\xc3\xcd\x0d\xb0\x62\x4b\x8e\x9c\xf1\xe8\xc1\xa5\x72\x5e\xa8\x0c\xf9\x4c\x6b\xcf\x0a\xa9\xa4\x9b\x63\x0e\xb7\xb7\x27\x90\x6b\xa2\xd5\x55\x48\xb4\x76\x3b\xc7\x49\xae\x15\xf5\x34\xe4\xed\xe7\x79\x48\x1b\x90\x12\xe7\xda\x49\xaf\xad\x44\x07\x04\x19\x1a\x93\x8b\x00\x2a\xe6\xc5\x07\xa3\xad\x87\x8b\xe1\xa7\xab\xfe\xe8\xee\xf3\x64\x3c\xfa\x73\x38\xba\x38\x53\x5a\xc5\xa2\x45\xe6\xe5\x02\x89\x60\x70\x4d\xae\x43\x3c\x56\x92\xb4\x62\x08\x04\xb6\xfa\xcf\x4b\x04\x4b\x44\xb0\x15\x09\xa9\xf0\x4b\x61\x91\x11\x23\x06\xad\xa7\xfc\x2c\xd0\xa6\xd5\xb3\x57\x9e\xb3\xe0\xb9\xc3\xb8\x0a\x8e\xc6\x88\x9e\x56\xb9\xc5\x6f\xdc\xcc\xcd\x31\x5b\xaf\x81\x7e\xef\x16\x68\x9d\xd4\x0a\x36\x1b\xea\xd1\x14\xb1\x76\x81\xc5\x19\x52\x85\xdf\x1b\x69\x89\x12\xfa\x34\x16\x17\xa8\x3c\xa4\x8d\x12\x8d\x9f\xd3\x51\x66\x04\x35\x07\x23\xb2\x7b\x51\xa2\x4b\xc9\x39\x0a\xcb\x81\x6e\x48\x1d\xc5\x6b\xe8\x9d\xbd\x9a\xee\x71\xb5\xad\xf6\x0d\x12\x22\xe5\x57\xad\x7b\xa0\xfd\xfa\xf2\x1a\xbe\x0e\xa6\xee\x03\xf4\x29\xed\x1c\x3f\x44\xde\x35\xc1\xb1\x3b\x1c\x91\xfd\x37\xd8\x13\xd1\xf3\x28\x54\x7e\x4c\xc3\x37\xdb\x7e\xb3\x5a\xe7\x2c\xde\xfd\x43\xad\x9f\x3d\x5a\x28\x69\xbe\x6b\xb4\x59\x63\x25\x8d\xe9\xac\x91\x55\xce\x48\x7e\xa1\x72\xfa\x0e\x56\xf4\xd4\x1e\x22\x9b\x75\x66\x57\x24\x8b\xf6\xbc\x72\xdf\xab\xf6\x58\x98\xba\x3d\x94\x79\xfb\x6b\x51\xe4\x61\x90\xdb\x2f\x53\x92\x65\x5b\xe8\xf0\xc1\x47\x5d\x44\x7d\x99\x58\x47\x2c\xa2\xbe\xcf\x25\x4d\x9c\x01\xee\xec\x82\x87\xa1\xa2\xde\x9a\xf6\xcd\x0b\x0b\x8f\x0f\x24\x6d\x5f\x9b\xdd\x53\xc7\x97\x8f\xc0\x06\xaf\xec\x63\x8e\x29\xfa\x98\x80\x74\x53\x4b\x17\xda\xbe\x4f\x18\x0d\xee\x52\x01\x9b\xc0\x72\xb9\x64\xd4\x06\xd1\x7b\x1d\x85\xe6\xb2\x1d\xa6\x97\xd7\x3c\xcc\x9c\x76\x68\x3b\xdf\x1c\x29\x89\x26\x28\x48\x84\x98\x79\xd5\xc0\xc1\x93\x59\xc8\x49\x04\xe6\x11\xf8\x13\x95\xcc\x4d\x61\xee\xbd\x71\x3d\xce\xa9\x6b\xbb\x98\xda\x96\x7c\xdb\x41\x6a\xf4\x8f\x40\x5c\x08\xbd\x85\x5c\x2f\x60\x67\x69\xe6\xc4\x07\x6f\x5c\xd8\x81\xb4\x5c\xe3\x0e\x7f\x7a\x4c\xb6\x70\x26\x8d\x52\x01\xcb\xd3\xfd\x4e\x9f\x2d\xa6\xa7\xb0\xac\xd9\x71\xf0\x7f\x11\x9f\x65\xc5\x96\xda\xde\x53\x50\x16\x3a\xb5\xc7\x0c\xbd\x29\xcd\x68\x47\xb6\x87\xdd\xf0\xd3\xb0\x16\x32\x69\x9b\x32\x88\xab\x8b\x74\x16\x3b\x1f\xe4\xb8\xd7\x13\x5b\x03\x27\x36\xf8\x56\xa9\x9c\x06\x9a\x26\x1e\x95\x98\x55\x98\xf3\x6e\xb7\x4b\xe1\x0b\xd1\x54\xbe\x13\x76\x60\x92\xd0\x5c\xc2\xe9\x69\xff\xba\x3f\xb8\x1c\x0e\xc6\xa3\xcf\xc4\x58\xab\x15\xc4\xb7\x02\xed\xd4\x13\xa2\xbc\x5c\xec\x34\xd8\x7f\xa0\x22\xd8\x61\xdc\x67\x2b\x18\x93\x61\x72\xfa\x55\x5a\xdf\x88\xea\x52\xd3\x3f\xd1\xaf\xbd\xdf\xba\xe7\xc4\xdd\x85\xce\x9a\x9a\x06\x64\x42\x0b\xf5\xb5\x6e\x00\x4e\x2f\x68\x99\x64\x71\x19\xed\x8b\x27\xb8\x02\x4c\xda\x6d\x03\x81\xd0\xd2\x0a\x22\x2a\x0f\x4e\x7c\xe7\x75\x9e\x9c\xf2\x17\x59\xcf\x93\xe7\x12\xb7\x44\x12\x6d\x61\x55\xbf\x4b\x93\x7f\x03\x00\x00\xff\xff\x1a\x05\x51\x17\xc0\x07\x00\x00"

func dataAwsSimpleBuildBuildPhpShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildBuildPhpShTpl,
		"data/aws-simple/build/build-php.sh.tpl",
	)
}

func dataAwsSimpleBuildBuildPhpShTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildBuildPhpShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/build-php.sh.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataAwsSimpleBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xdd\x6e\xdb\x20\x18\xbd\xf7\x53\x20\x4b\xe9\x55\x6c\x67\x6b\x35\x4d\xbb\xdd\x63\x54\x91\x8b\x6d\x1a\xa3\x00\x46\x7c\x90\xa9\xb5\x78\xf7\x7d\xf8\x3f\x4b\xe2\x64\xcd\x0d\x11\xe7\xf8\x9c\xef\x97\x36\x22\xf8\x8b\x25\x57\xb9\xa6\xe5\x91\x99\xfc\xc4\x0c\xf0\x46\xc5\xbf\x48\xbc\x4b\x7f\xa6\xbb\x78\x1b\xf5\x9c\x13\x35\x9c\x16\x82\x01\x42\xfd\x67\x78\x49\xff\x40\x4e\xcb\x92\x01\xe4\x47\xf6\x81\x88\x72\x42\x6c\x97\x28\xb0\xd2\x30\x7b\x0b\x35\xec\xd0\x9b\x5d\x20\x27\x5d\xe6\xbc\xba\xaa\xe8\x0a\x85\x8a\x97\x20\x08\x77\xc0\x34\x6c\x3d\x00\xdd\xbd\x1f\xe3\xd7\xa6\x39\xf1\x90\x1a\x26\x88\x84\xd7\xe1\xab\x76\x43\xde\x1b\x43\x2a\x6e\x08\x57\xf8\xd7\xa9\x8a\x5a\x64\xe5\x78\x03\x69\xe1\xb8\xa8\xc8\xc6\x8f\xe4\xe1\x44\x39\xfb\xa1\x59\x28\x12\xd4\x4c\x88\x78\x3b\x03\x5c\x09\xae\x02\xf4\x1a\xcb\x63\x90\x4d\x34\xc9\xac\xd4\x59\x63\x6d\x93\xcd\x06\x49\xdb\x06\x67\xd1\x34\x3a\xfd\x8d\xb7\x96\x19\xe2\x7d\xbc\x1f\x94\xfc\xf6\xb6\xe7\x3b\x17\x6c\x69\x09\x8d\x33\x65\x87\xa0\x66\xb0\xf4\x3e\x5b\xe2\x15\x03\xcb\x55\xe7\x1a\x48\xff\x11\xcd\x03\xc1\xac\x15\xa0\xac\x1e\x4d\xdd\x7b\xf2\xf4\x44\x0a\x0a\x35\x49\x33\x49\xb9\x4a\xa1\xbe\x52\x8b\x0d\x61\xaa\x0a\xfd\x5a\x6b\xc9\x4a\x79\x36\x04\xe7\xbb\xc0\x20\x24\x2a\x60\x14\x0e\x30\xcf\xb7\x69\x70\xde\x30\xe7\xde\x63\x41\x7b\xa4\x92\x09\xd5\x3a\xb5\x87\xcf\x2f\x15\x0c\x4a\xc3\xb5\x0d\x50\x37\x6e\x89\xae\x75\xc8\x7e\x94\xea\xce\xfd\x38\xc6\x1d\x65\x18\xe1\x69\x0d\x15\x95\x9d\x74\x08\x65\x52\x9e\x0c\xa9\xa4\x9f\x58\x74\x56\xc0\x8c\x9d\x2d\xed\xad\xba\x9c\x6f\xf7\x7a\x71\xe2\xb3\x45\x5f\x53\x9c\x89\x77\x14\xa7\xc7\x61\x4d\xad\x27\xdd\x51\x9a\x1e\x93\x35\xa5\x9e\x74\x2f\xcb\xc5\xe3\xb3\x9a\xe4\xc8\xbb\xa7\xd7\xcd\x66\x4e\x25\xef\x3b\xc5\x93\xef\xdf\x7e\x3c\xef\xaa\x97\x97\x99\xc3\x15\x58\xaa\x90\x35\x36\xb4\x7c\x4e\x05\x35\x07\xb6\x90\x81\x3a\x0f\xe6\xe3\x20\xb8\x02\xb7\xca\x2d\xda\x2d\x79\x3e\x62\x6d\x1b\xfe\xe1\xc2\xfd\x1b\x3e\x9e\x38\xde\x54\xea\x6b\x11\xf7\x8f\xe9\x3e\x8a\x7c\xf4\x37\x00\x00\xff\xff\xa7\xe7\xbe\x37\x35\x06\x00\x00"

func dataAwsSimpleBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildTemplateJsonTpl,
		"data/aws-simple/build/template.json.tpl",
	)
}

func dataAwsSimpleBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\xc1\x8e\xdb\x20\x10\xbd\xe7\x2b\x46\x74\x8f\x5d\x27\xed\xb1\x52\xcf\xbd\xb5\x1f\x50\xad\x10\xc6\x24\x45\x8b\x01\xc1\x90\xca\xb2\xfc\xef\x1d\xa0\x16\xc1\xbb\xbd\x36\x39\xf9\xcd\x63\xde\xcc\x9b\xf7\x01\xbe\x29\xab\x82\x40\x35\xc1\xb8\xc0\x0f\x44\xf7\x11\x26\x07\xd6\x21\xa8\x49\x23\xcc\xc2\x26\x61\xcc\x72\x3a\xdd\x45\xd0\x62\x34\x0a\x98\xb6\xd7\x20\xb8\x9e\x18\xac\xdb\x03\x2c\x7e\x47\x2e\xa4\x54\x31\xf2\x57\xb5\xbc\x53\x8c\x4a\x06\x85\xff\x28\x06\x75\xd3\xce\x1e\x0a\x44\xe5\x56\xcc\xaa\xc0\x8f\x0f\x66\x7d\x60\x6a\x1b\x51\x58\xa9\x38\x2e\x3e\xd3\x61\x52\x57\x91\x0c\xc2\x57\x60\xf8\x79\x98\xb5\x0c\x8e\xc1\xe3\x8b\x98\x46\x4b\xd3\xf8\x34\x1a\x2d\x0f\xdd\xee\x5e\x72\xa9\xa7\xf0\x0e\xfc\x77\xed\x93\x0f\xee\xae\x27\x15\xca\xf4\x04\x9d\x00\xda\xf2\x59\xf5\x69\xa5\x87\x43\x6f\xca\xc6\x88\xd6\x6c\xe8\x69\x0d\x2f\xb4\x6a\x08\xe4\x5f\x47\xab\x38\x51\x68\x88\xa0\xa2\x4b\x41\x36\x7f\x53\xd0\xb8\xf0\x5b\x70\xc9\x33\x02\xbd\xaf\x93\x65\x0f\x6b\x9f\x75\xad\x1f\xdb\xf6\x5c\x5b\xee\xc7\x2c\x9a\x75\xc1\xa6\x57\xbf\xa9\x44\x35\x6d\x6f\x24\x17\x4b\x3f\x00\x5a\x1f\x9d\x74\xa6\x8e\xf7\xfc\xa9\x80\xd7\xe0\x66\xee\x5d\xc0\x02\x5e\x0a\x86\x6e\x47\x1a\x96\xad\xe5\xa3\x71\xf2\x35\x12\xf6\x93\x5d\x86\xf2\x3f\x5f\xd8\x0b\xd5\xb7\xac\xa6\xfe\x9b\xd8\x1b\x1b\xf7\x28\x3d\x1a\x48\x81\x83\xf6\x6b\xf7\x98\x75\xf1\xad\x4b\x5f\x2b\x77\x70\xbd\x7d\x0d\x1d\x79\xdc\xf5\xe9\xb2\x58\x88\x7b\xf2\x0f\x82\x3b\x5c\x4f\x92\xcf\xd3\x1f\x9d\x3a\xd7\x2d\x9f\xd6\xb7\x89\x18\x68\x9d\x21\x9f\xf3\x25\x3f\x46\x71\x23\x7f\xe1\x7b\x16\xe9\x82\xc1\xaa\x29\x2e\xa1\x4f\x08\x2c\x05\x53\x3d\xb8\x0b\x93\x0a\xf5\x17\xa2\xff\x72\x3e\x57\x89\x7d\xc7\xd2\xbc\x2e\xc0\x27\x1b\xb7\x73\x0e\xe8\x9f\x00\x00\x00\xff\xff\x5f\x73\x79\x4b\x5f\x04\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\x55\x48\xad\x28\x49\xcd\x4b\x29\x56\x50\x4a\xce\xcf\x2d\xc8\xcc\x49\xb5\x4a\x49\x2c\x49\xd4\x4f\x2c\x28\xd0\x4f\x49\x2d\xd3\x0f\x4b\x4c\x2f\x4a\xcc\x2b\x49\x03\x4a\xe8\x95\x14\xe4\x28\x29\xa8\xd6\x72\x01\x02\x00\x00\xff\xff\x4f\x9a\x64\xdd\x35\x00\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCommonDevLayerBaseVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xc1\x6e\xdb\x30\x0c\xbd\xeb\x2b\x38\x77\xbd\x2d\xd6\xbd\xe8\x2e\xcb\x0e\x0d\xb0\x01\x41\x53\xf4\x34\xc0\x95\x6d\xc6\x11\xa2\x48\x82\x48\x05\x4b\x83\xfc\xfb\xa8\xd8\x19\xd2\xa2\xbd\x49\xef\x3d\x3d\x52\x8f\x3c\xde\x02\xfe\x65\xf4\x3d\x41\xd5\x85\x5d\xb4\x0e\xef\x7a\xc3\x46\x9b\x18\x75\x8f\x7b\xfd\x6c\x86\x64\x3c\xaf\x85\x98\x39\x73\xc0\x54\x73\x74\x15\xdc\x9e\x94\x92\xb7\xad\x0b\xdd\x16\xf6\xa3\xa6\xe9\x82\x5f\xdb\xa1\x70\x00\x37\xb0\x42\xce\x11\x1e\x73\x7b\x90\xeb\x48\xd5\xfb\x5d\x1d\x53\xd8\x5b\xb2\xc1\x43\x45\x1b\x74\xae\xfa\x06\xd6\x3b\xeb\xf1\x0e\xbe\x52\x97\x6c\xe4\x46\x6a\x17\x73\xe9\x6a\xf4\x7f\x53\x6c\x1d\x02\x63\x2a\xd8\x95\x1c\xbe\xc3\xfd\xfd\x6a\xfe\xb8\x58\x3e\xa9\x9b\x2f\xba\xb5\x5e\xb7\x86\x36\x8a\x90\x61\x86\x4a\x5d\xba\x09\x39\xc1\xf8\x2a\x9a\x6e\x4b\xaa\x06\x1d\x98\x83\xbe\xc2\xf4\xea\xe9\xe7\xaf\xc5\x0f\xbd\x33\xd6\xd7\x62\xf1\x91\x64\xf9\xb0\xfc\xcf\x8b\xf7\xc2\x5b\xb6\xc6\xd9\x57\x54\x45\xda\x58\xb9\x17\xfc\xb7\xd9\x22\x58\x06\x0a\xc0\x1b\xc3\xf0\x32\x05\x05\x44\x9b\x17\x18\x02\x12\xf4\x36\x61\xc7\xee\x00\x5c\x34\x28\x39\xa5\x02\x14\x5c\x5d\x62\xed\x71\x6d\xb2\x93\x78\x7b\xa8\x26\xac\x82\x4a\x5f\x8e\xa5\xd2\xfc\x1c\x6f\x4e\xd6\x0f\xb0\x5a\x3d\x48\x48\x09\xd6\x86\x4a\x50\x2e\x0c\xd6\xab\xb7\x23\x6a\x0a\xd7\xd0\xa5\x7b\x62\xe3\x1c\xc8\xa7\xc6\xf6\x43\xe6\x98\x19\xaa\x89\x28\x9e\xc2\xc1\x33\xa6\xf3\xd8\x8e\xc7\xb8\x89\xcd\x7e\xbc\x9d\x4e\x50\xa9\x80\x50\x20\x3b\x19\x55\xef\x14\xd2\xe1\x67\xbe\x94\x63\x0c\x89\xcb\xb1\x24\x6b\x06\xa4\xba\xae\xcf\x8e\x94\xfb\x00\x26\xf2\x6c\x90\x19\x5e\xac\x67\x07\xf8\x23\xdb\xd4\xbe\x26\x18\x24\xd8\x1d\xa6\x4e\x3e\x6d\x1c\xb4\xd9\xba\x7e\x86\x44\xe8\xcb\x28\xce\x2a\xa1\xdc\xe7\xa5\xe7\xb2\xed\x81\x64\x9f\x4b\xbd\xab\xf6\x9b\x6e\x22\xd4\xb4\x4f\xef\x36\xf1\x5f\x00\x00\x00\xff\xff\x5e\x70\x03\x93\x32\x03\x00\x00"

func dataCommonDevLayerBaseVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevLayerBaseVagrantfileTpl,
		"data/common/dev/layer-base/Vagrantfile.tpl",
	)
}

func dataCommonDevLayerBaseVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevLayerBaseVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/layer-base/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCommonDevPhp_versionTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x28\xc8\x28\x88\x2f\x4b\x2d\x2a\xce\xcc\xcf\x53\xa8\xad\xe5\xe2\x0a\xc9\xc8\x2c\x56\x48\xcb\xcc\x49\x55\x28\x2e\xc9\x2f\x4a\x2d\x56\x28\xc9\x48\x55\x08\xf0\x08\x50\x80\x2a\xd2\x53\x70\xc9\x57\xc8\xcb\x2f\x51\x28\xc9\x2f\x4d\xce\x50\xc8\x2c\xd1\xe3\x02\x04\x00\x00\xff\xff\x0a\x58\x19\xc1\x46\x00\x00\x00"

func dataCommonDevPhp_versionTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevPhp_versionTpl,
		"data/common/dev/php_version.tpl",
	)
}

func dataCommonDevPhp_versionTpl() (*asset, error) {
	bytes, err := dataCommonDevPhp_versionTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/php_version.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/build/build-php.sh.tpl": dataAwsSimpleBuildBuildPhpShTpl,
	"data/aws-simple/build/template.json.tpl": dataAwsSimpleBuildTemplateJsonTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
	"data/common/dev/layer-base/Vagrantfile.tpl": dataCommonDevLayerBaseVagrantfileTpl,
	"data/common/dev/php_version.tpl": dataCommonDevPhp_versionTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"build-php.sh.tpl": &bintree{dataAwsSimpleBuildBuildPhpShTpl, map[string]*bintree{}},
				"template.json.tpl": &bintree{dataAwsSimpleBuildTemplateJsonTpl, map[string]*bintree{}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{}},
				"layer-base": &bintree{nil, map[string]*bintree{
					"Vagrantfile.tpl": &bintree{dataCommonDevLayerBaseVagrantfileTpl, map[string]*bintree{}},
				}},
				"php_version.tpl": &bintree{dataCommonDevPhp_versionTpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

